/**
 * RegexServiceImpl.java
 * @author  qye.zheng
 * 	version 1.0
 */
package com.hua.service.impl;

import com.hua.service.RegexService;

/**
 * RegexServiceImpl
 * 描述: 正则 - 服务
 * @author  qye.zheng
 */
public final class RegexServiceImpl extends CoreServiceImpl implements
		RegexService
{
	
	/**
	 
	 正则表达式是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和 特殊字符（称为"元字符"）。
	 模式描述在搜索文本时要匹配的一个或多个字符串。
	 
	 正则-放斜杠:
	 将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，“n”匹配字符“n”。“\n”匹配换行符。序列“\\”匹配“\”，“\(”匹配“(”。
	 \n 标记为特殊字符，\( 标记为文本，\77 标记为8进制，(.)\1 标记为反向引用
	 
	 */
	
	/**
	 
	 转义字符 \ 	凡是普通字符 与 正则字符相同的，为了表示普通字符必须在单个
	 字符前面加上反斜杠.
	 
	 
	 正则字符
	1) 起止
	正则_开始: ^    正则_结束: $
	
	2) 转义字符: \     ( ): 提升优先级
	3) |: 或     
	. : 任意一个字符(包括空格但不包括\n)，匹配除“\n”之外的任何单个字符。
	若要匹配包括“\n”在内的任意字符，请使用诸如“[\s\S]”之类的模式。
	
	4) [ ]: 在里面选一个字符   ^表示非，-表示范围双闭区间
	
	5) 
	\d: 所有数字，即[0-9]  \D: 非数字
 	\w: 英文单词字符    \W: 非单词字符 
 	\s 空格
 	
	7) +: 前面的内容出现1-n次 (至少一次) 等效于 {1,}
	
	8) ?: 前面的内容出现0-1次 (有或无) 等效于 {0,1} 
	当此字符紧随任何其他限定符（*、+、?、{n}、{n,}、{n,m}）之后时，匹配模式是"非贪心的"。"非贪心的"模式匹配搜索到的、尽可能短的字符串，
	而默认的"贪心的"模式匹配搜索到的、尽可能长的字符串。例如，在字符串"oooo"中，"o+?"只匹配单个"o"，而"o+"匹配所有"o"
	
	9) *: 前面的内容出现0-n次 (任意次) 等效于 {0,}
	
	10) {n}: 出现n次  {n,}: 至少n次   {n,m}: n-m次 (n, m 是非负整数 , n <= m，注意数字之间不能有空格)
	 
	 正则表达式: 把正则表达写出来，然后再转成字符串形式.
	 流程: 
	 匹配规则 --> 正则表达式 -字符串形式-> 正则表达式字符串
	 
	 最后转成了字符串表达式字符串，才能作为方法的一个参数存在，
	 事实上，很多方法都是接收字符串形式的正则表达式 (有些脚本语言，
	 例如 javascript 可以直接书写正则表达而无需转为字符串形式).
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 */
}
